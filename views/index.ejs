<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>DuniaMaps Demo</title>
    <link rel="stylesheet" href="/css/index.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css"
        integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ=="
        crossorigin="" />
    <script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js"
        integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw=="
        crossorigin=""></script>
</head>

<body>
    <div class="wrapper">
        <div class="layout">
            <div class="sidebar">
                <div class="input">
                    <p id="inputmessage">Select pick-up location</p>
                    <div class="wrapper">
                        <input type="text" id="pickup" oninput="searchPOI(this)" placeholder="Select pick-up location">
                        <input type="text" id="destination" oninput="searchPOI(this)" placeholder="Search destination">
                    </div>
                    <div id="suggestions"></div>
                </div>
                <h4>Response</h4>
                <div id="distance"></div>
                <div id="instructions"></div>
            </div>
            <div id="map"></div>
        </div>
    </div>

    <script>
        let details = {
            coordinates: {
                lat: -1.2988071,
                lng: 36.8160473
            },
            url: 'https://www.duniamaps.com/tile/{z}/{x}/{y}.png',
            attribution: 'Map data & copy; <a href="https://duniamaps.com/">DuniaMaps</a>'
        }
        var mymap;
        var points = []

        buildMap(details.coordinates.lat, details.coordinates.lng)



        function buildMap(lat, lng) {
            mymap = L.map('map').setView([lat, lng], 15);// initialize map view

            L.tileLayer(details.url, {
                attribution: details.attribution,
                apikey: ''
            }).addTo(mymap);
        }


        function getOptimumRoute(query) {
            console.log(query)
            fetch(`/route/${query}`)
                .then((resp) => resp.json())
                .then((data) => {
                    console.log(data)
                    routeDetails(data)
                })
                .catch((err) => {
                    console.log(err)
                });
        }

        function searchPOI(e) {
            if (e.value.length >= 3) {
                fetch(`/poi/${e.value}`)
                    .then((resp) => resp.json())
                    .then((data) => {
                        console.log(data.features)
                        let container = document.getElementById('suggestions')
                        container.innerHTML = ''
                        data.features.forEach(feature => {
                            let sugg = document.createElement('h4')
                            sugg.textContent = feature.properties.name
                            sugg.onclick = () => {
                                e.value = feature.properties.name
                                let coordinates = [feature.geometry.coordinates[1], feature.geometry.coordinates[0]]
                                
                                addMarker(coordinates)
                            }
                            container.appendChild(sugg)
                        })
                    })
                    .catch((err) => {
                        console.log(err)
                    });
            }
        }

        function routeDetails(data) {
            document.getElementById('distance').textContent = `Distance; ${data.paths[0].distance} meters; Estimated Time: ${convertTime(data.paths[0].time)} seconds`

            let instructions = document.getElementById('instructions')

            data.paths[0].instructions.forEach(element => {
                instructions.innerHTML += `<h4> ${element.text} for ${convertTime(element.time)} seconds </h4>`
            });

            var myLines = {
                "type": "LineString",
                "coordinates": data.paths[0].points.coordinates
            }

            var myLayer = L.geoJSON().addTo(mymap);
            myLayer.addData(myLines);
        }

        function convertTime(secs) {
            return Math.floor(secs / 60);
        }

        function addMarker(coords) {
            L.marker(coords).addTo(mymap);
            mymap.flyTo(coords, 12)

            points.push(coords)

            if (points.length >= 2) {
                console.log('two')
                getOptimumRoute(`point=${points[0]}&point=${points[1]}&locale=en-US&vehicle=car&weighting=fastest&elevation=true&use_miles=false&layer=OpenStreetMap&points_encoded=false`)
            }
        }

    </script>

</body>

</html>